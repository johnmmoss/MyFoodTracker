trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solutionPath: 'src/api/MyFoodTracker.Api.sln'
  buildConfiguration: 'Release'
  azure_subscription_id: '11c3f65f-a3ca-4d31-8716-8d5229a01942'
  azure_devops_subscription_name: 'myfoodtracker-azure-devops'

stages:
  - stage: Build
    displayName: Build

    jobs:
      - job: "BuildApi"
        steps:
        - task: DotNetCoreCLI@2
          displayName: dotnet Publish
          inputs:
            command: publish
            publishWebProjects: false
            projects: "$(solutionPath)"
            arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)"
            zipAfterPublish: false
        - task: ArchiveFiles@2
          displayName: Zip Api
          inputs:
            rootFolderOrFile: "$(Build.ArtifactStagingDirectory)/api"
            includeRootFolder: false
            archiveType: "zip"
            archiveFile: "$(Build.ArtifactStagingDirectory)/out/myfoodtracker-api-$(Build.BuildId).zip"
            replaceExistingArchive: true
        - task: PublishBuildArtifacts@1
          displayName: "Publish Artifact (api)"
          inputs:
            PathtoPublish: "$(Build.ArtifactStagingDirectory)/out"
            ArtifactName: "drop_api"
            publishLocation: "Container"            

      - job: "BuildWeb"
        steps:
        - task: Npm@1
          displayName: 'npm install'
          inputs:
            command: 'install'
            workingDir: "src/client"
        - task: Npm@1
          displayName: 'npm build'
          inputs:
            command: 'custom'
            workingDir: "src/client"
            customCommand: 'run build'
        - task: PublishBuildArtifacts@1
          displayName: "Publish Artifact (web)"
          inputs:
            PathtoPublish: "src/client/build"
            ArtifactName: "drop_web"
            publishLocation: "Container"  

      - job: "BuildInfra"
        steps:
        - task: PublishBuildArtifacts@1
          displayName: "Publish Artifact (infra)"
          inputs:
            PathtoPublish: "deploy"
            ArtifactName: "drop_infra"
            publishLocation: "Container"   

  - stage: DeployDev
    displayName: Deploy Dev
    jobs:

      - job: Infra Plan 
        displayName: RunInfraPlan
        steps:
          - checkout: none
            displayName: 'Download Infra Artifacts'
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop_infra'
              downloadPath: '$(Pipeline.Workspace)'
          - task: AzureCLI@2
            displayName: 'Run Plan'
            inputs:
              scriptType: ps
              scriptLocation: inlineScript
              addSpnToEnvironment: true
              azureSubscription: $(azure_devops_subscription_name)
              inlineScript: |
                az account list -o table
                choco install terraform -y
                $env:ARM_CLIENT_ID=$env:servicePrincipalId
                $env:ARM_CLIENT_SECRET=$env:servicePrincipalKey
                $env:ARM_TENANT_ID=$env:tenantId
                $env:ARM_SUBSCRIPTION_ID="$(azure_subscription_id)"
                ls env:
                cd $(Pipeline.Workspace)\drop_infra\environments\dev
                pwd
                ls
                terraform init
                terraform plan -no-color

      - job: ApproveInfraPlan
        dependsOn: RunInfraPlan
        displayName: Approve Infra Plan
        pool: server
        steps:
          - task: ManualValidation@0
            displayName: 'Review Infra Plan'
            inputs:
              notifyUsers: ''
              instructions: Review plan and approve

      - deployment: CreateInfra
        dependsOn: ApproveInfraPlan
        displayName: "Create Infra"
        environment: my-food-tracker-dev
        checkout: none
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@0
                  displayName: 'Download Infra Artifacts'
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'drop_infra'
                    downloadPath: '$(Pipeline.Workspace)'
                - task: AzureCLI@2
                  displayName: 'Apply Terraform'
                  inputs:
                    scriptType: ps
                    scriptLocation: inlineScript
                    addSpnToEnvironment: true
                    azureSubscription: $(azure_devops_subscription_name)
                    inlineScript: |
                      choco install terraform -y
                      $env:ARM_CLIENT_ID=$env:servicePrincipalId
                      $env:ARM_CLIENT_SECRET=$env:servicePrincipalKey
                      $env:ARM_TENANT_ID=$env:tenantId
                      $env:ARM_SUBSCRIPTION_ID="$(azure_subscription_id)"
                      cd $(Pipeline.Workspace)\drop_infra\environments\dev
                      terraform init
                      terraform apply -no-color -auto-approve