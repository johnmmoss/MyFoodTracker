trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solutionPath: 'src/api/MyFoodTracker.Api.sln'
  buildConfiguration: 'Release'
  azure_subscription_id: '11c3f65f-a3ca-4d31-8716-8d5229a01942'
  azure_devops_subscription_name: 'myfoodtracker-azure-devops'
  webStorageName: 'mftwebdevuks'

stages:
  - stage: Build
    displayName: Build
    jobs:

      - job: "BuildApi"
        steps:
        - task: DotNetCoreCLI@2
          displayName: dotnet Publish
          inputs:
            command: publish
            publishWebProjects: false
            projects: "$(solutionPath)"
            arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)"
            zipAfterPublish: false
        - task: ArchiveFiles@2
          displayName: Zip Api
          inputs:
            rootFolderOrFile: "$(Build.ArtifactStagingDirectory)/api"
            includeRootFolder: false
            archiveType: "zip"
            archiveFile: "$(Build.ArtifactStagingDirectory)/out/myfoodtracker-api-$(Build.BuildId).zip"
            replaceExistingArchive: true
        - task: PublishBuildArtifacts@1
          displayName: "Publish Artifact (api)"
          inputs:
            PathtoPublish: "$(Build.ArtifactStagingDirectory)/out"
            ArtifactName: "drop_api"
            publishLocation: "Container"            

      - job: "BuildWeb"
        steps:
        - task: Npm@1
          displayName: 'npm install'
          inputs:
            command: 'install'
            workingDir: "src/client"
        - task: Npm@1
          displayName: 'npm build'
          inputs:
            command: 'custom'
            workingDir: "src/client"
            customCommand: 'run build'
        - task: PublishBuildArtifacts@1
          displayName: "Publish Artifact (web)"
          inputs:
            PathtoPublish: "src/client/build"
            ArtifactName: "drop_web"
            publishLocation: "Container"  

      - job: "BuildInfra"
        steps:
        - task: PublishBuildArtifacts@1
          displayName: "Publish Artifact (infra)"
          inputs:
            PathtoPublish: "deploy"
            ArtifactName: "drop_infra"
            publishLocation: "Container"   

  - stage: DeployDev
    displayName: Deploy Dev
    jobs:

      # - job: InfraPlan 
      #   displayName: Infra Plan
      #   steps:
      #     - checkout: none
      #       displayName: 'Download Infra Artifacts'
      #     - task: DownloadBuildArtifacts@0
      #       inputs:
      #         buildType: 'current'
      #         downloadType: 'single'
      #         artifactName: 'drop_infra'
      #         downloadPath: '$(Pipeline.Workspace)'
      #     - task: AzureCLI@2
      #       displayName: 'Run Plan'
      #       inputs:
      #         scriptType: ps
      #         scriptLocation: inlineScript
      #         addSpnToEnvironment: true
      #         azureSubscription: $(azure_devops_subscription_name)
      #         inlineScript: |
      #           az account list -o table
      #           choco install terraform -y
      #           $env:ARM_CLIENT_ID=$env:servicePrincipalId
      #           $env:ARM_CLIENT_SECRET=$env:servicePrincipalKey
      #           $env:ARM_TENANT_ID=$env:tenantId
      #           $env:ARM_SUBSCRIPTION_ID="$(azure_subscription_id)"
      #           ls env:
      #           cd $(Pipeline.Workspace)\drop_infra\environments\dev
      #           terraform init
      #           terraform plan -no-color

      # - job: ReviewPlan
      #   dependsOn: InfraPlan
      #   displayName: Review Plan
      #   pool: server
      #   steps:
      #     - task: ManualValidation@0
      #       displayName: 'Review Plan'
      #       inputs:
      #         notifyUsers: ''
      #         instructions: Review plan and approve

      - deployment: Deploy
        environment: my-food-tracker-dev
        dependsOn: ReviewPlan
        strategy:
          runOnce:
            deploy:
              steps:
                # - task: AzureCLI@2
                #   displayName: 'Create Infra'
                #   inputs:
                #     scriptType: ps
                #     scriptLocation: inlineScript
                #     addSpnToEnvironment: true
                #     azureSubscription: $(azure_devops_subscription_name)
                #     inlineScript: |
                #       choco install terraform -y
                #       $env:ARM_CLIENT_ID=$env:servicePrincipalId
                #       $env:ARM_CLIENT_SECRET=$env:servicePrincipalKey
                #       $env:ARM_TENANT_ID=$env:tenantId
                #       $env:ARM_SUBSCRIPTION_ID="$(azure_subscription_id)"
                #       cd $(Pipeline.Workspace)\drop_infra\environments\dev
                #       terraform init
                #       terraform apply -no-color -auto-approve
               - task: AzureRmWebAppDeployment@4
                 displayName: DeployApi
                 inputs:
                    ConnectionType: 'AzureRM'
                    azureSubscription: 'myfoodtracker-azure-devops'
                    appType: 'apiApp'
                    WebAppName: 'myfoodtracker-api-dev-uks'
                    packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip' 
                - task: AzureCLI@2
                  displayName: DeployWeb
                  inputs:
                    scriptType: ps
                    scriptLocation: inlineScript
                    addSpnToEnvironment: true
                    azureSubscription: $(azure_devops_subscription_name)
                    inlineScript: |
                      az storage blob upload-batch -d "`$web" --account-name $(webStorageName) -s build --overwrite